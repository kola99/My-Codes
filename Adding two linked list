Variant reverse both list then add eaach node along with carry...
without reversing was asked...
recursive solution also...
Iterative staright hai ...but if 
msb is first digit in linked llist then u have to use recursion---
rec approach---
if list of same size---1) Calculate sizes of given two linked lists.
2) If sizes are same, then calculate sum using recursion. Hold all nodes in recursion call stack till the rightmost node, calculate the sum of rightmost nodes and 
forward carry to the left side.
3) If size is not same, then follow below steps:
….a) Calculate difference of sizes of two linked lists. Let the difference be diff
….b) Move diff nodes ahead in the bigger linked list. Now use step 2 to calculate the sum of the smaller list and right sub-list (of the same size) of a larger list.
Also, store the carry of this sum.
….c) Calculate the sum of the carry (calculated in the previous step) with the remaining left sub-list of a larger list. Nodes of this sum are added at the 
beginning of the sum list obtained the previous step.



void addsamesize(node n, node m)  
    { 
        // Since the function assumes linked lists are of  
        // same size, check any of the two head pointers 
        if (n == null) 
            return; 
  
        // Recursively add remaining nodes and get the carry 
        addsamesize(n.next, m.next); 
  
        // add digits of current nodes and propagated carry 
        int sum = n.val + m.val + carry; 
        carry = sum / 10; 
        sum = sum % 10; 
  
        // Push this to result list 
        push(sum, 3); 
  
    } 
    
    
    push function 
            newnode.next = result; 
            result = newnode; 
